{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ToDo\n",
    "- Test if small batch is better\n",
    "    - Exp 1\n",
    "        - Save to 006\n",
    "        - starting from 005, and shring batch size to 512\n",
    "        - Results: after 183 epochs, the accuracy was actually lower than before training. Batch size is probably not to big at 4096.\n",
    "    - Exp 2\n",
    "        - Starting from 012, a 100.000 pm net trained for 1600 epochs at bs 4096\n",
    "        - Switching to bs 32 created horrible results, network totally failed to perform, lost acc from 0.95 to 0.85 in 17 epochs. Plus, super slow to train\n",
    "- Test Adam\n",
    "    - Results\n",
    "        - 007 Adam, final accuracy 0.939 after 500\n",
    "        - 005 Adadelta, final accuracy 0.952 after 1000 epochs\n",
    "        - Adam not performing better than Adadelta\n",
    "- Test 2x2 and 3x3 filters for performance\n",
    "    - 2x2 5 layers (005)\n",
    "    - 3x3 3 layers (003)\n",
    "    - ~50.000 parameters\n",
    "    - Results\n",
    "        - 005 vs 008\n",
    "        - Same performance after 331 epochs\n",
    "- Test float16\n",
    "    - 005 float32\n",
    "    - 010 float16\n",
    "    - Results\n",
    "        - float16 scored lower\n",
    "        - float16 is 40% longer per epoch (35sec vs 50sec per epoch\n",
    "        - float32 is the way to go!\n",
    "- Try Batch Normalization\n",
    "    - model.add(BatchNormalization())\n",
    "    - Results:\n",
    "        - Comparing with 005, no batch norm\n",
    "        - Saved to 011, with batch norm\n",
    "        - ~same number of weights...\n",
    "        - Batch Normalization is performing worse after ~40 epochs\n",
    "- Try different initial weights\n",
    "    - keras.initializers.RandomNormal(mean=0.0, stddev=0.05, seed=None)\n",
    "    - Results\n",
    "        - Tried for a few epochs, similar curve as for 005\n",
    "- Test bigger model, try to get it to everfit\n",
    "\n",
    "\n",
    "\n",
    "- Test Checkpoints feature\n",
    "- Train longer....\n",
    "\n",
    "- Try opther optimizers\n",
    "\n",
    "- Make histogram of WDL values\n",
    "- Test TensorBoard\n",
    "    - Results\n",
    "- Do TL experiment\n",
    "    - Results\n",
    "- Finish 5pc dataset\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Parameters "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "# What data to use\n",
    "tableBase = '4PpKk'\n",
    "convertStates = False\n",
    "fractionOfDataToUse = 1 # [0,1]\n",
    "\n",
    "# Transfer Learning\n",
    "loadWeights = False \n",
    "weightsSource = '012'\n",
    "\n",
    "# Save results\n",
    "saveResults = True\n",
    "\n",
    "# Compare with other result during training\n",
    "compareResultsDuringTraining = True\n",
    "compareWith = '005' # orginal net structure, trained from random on 4pc dataset\n",
    "\n",
    "\n",
    "# NN parameters\n",
    "useBatchNorm = False\n",
    "filters = [8,16,32,64,128]\n",
    "filterShape = [2,2,2,2,2]\n",
    "batch_size = 4096\n",
    "epochs = 2000\n",
    "multiGPU = False\n",
    "whichGPU = 0\n",
    "# optimizer = 'Adam'\n",
    "optimizer = 'Adadelta'\n",
    "\n",
    "\n",
    "\n",
    "### NO NEED TO MODIFY BELOW ###\n",
    "# Generate dataset variables\n",
    "fileName = tableBase + '.hdf5'\n",
    "dataSetName = tableBase + '_onlyLegal'\n",
    "if not convertStates: \n",
    "    dataSetName = tableBase + '_onlyLegal_fullState'\n",
    "dataSetWdlName = tableBase + '_Wdl_onlyLegal'\n",
    "\n",
    "# Number of Pieces\n",
    "nPi =  int(dataSetName[0])\n",
    "nPa = nPi - 2\n",
    "nWPa = math.ceil(nPa/2)\n",
    "\n",
    "# Other NN stuff\n",
    "num_classes = 5\n",
    "input_shape = (4,8,8)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ### To select which GPU to use, import these before importing Keras or Tensorflow\n",
    "# import os\n",
    "# os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\"\n",
    "# # The GPU id to use, usually either &quot;0&quot; or &quot;1&quot;\n",
    "# os.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"  \n",
    " \n",
    "# # Do other imports now..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "    \n",
    "if(multiGPU):\n",
    "    from keras.utils.training_utils import multi_gpu_model\n",
    "else:\n",
    "    import os\n",
    "    os.environ[\"CUDA_DEVICE_ORDER\"]=\"PCI_BUS_ID\"\n",
    "    # The GPU id to use, usually either \"0\" or \"1\"\n",
    "    os.environ[\"CUDA_VISIBLE_DEVICES\"] = str(whichGPU)\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "from IPython.display import clear_output\n",
    "\n",
    "# from __future__ import print_function\n",
    "import keras\n",
    "# from keras.datasets import mnist\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Flatten\n",
    "from keras.layers import Conv2D, MaxPooling2D, BatchNormalization, Activation\n",
    "from keras import backend as K\n",
    "# import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "import sys\n",
    "import h5py\n",
    "import numpy as np\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis\n",
    "```\n",
    "3PKk-Wdl-Buffered == 3PKk-Wdl-Seq\n",
    "\n",
    "4PpKk-Wdl == 4PpKk-Wdl-Buffered != 4PpKk-Wdl-retry\n",
    "\n",
    "5PPpKk-Wdl != 5PPpKk-Wdl-Buffered\n",
    "    from 50.000 then buffered != 10, but wdl == 10\n",
    "```\n",
    "  \n",
    "### WDL score count\n",
    "#### 3PKk-WDL-Seq\n",
    "[0, 0, 125024, 0, 124960]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Functions for vector to full state conversion AND MORE!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "def createDir(dir):\n",
    "    if os.path.exists(dir):\n",
    "        print(\"Error, directory \" + str(dir) + \" already exists, abort mission.\")\n",
    "        sys.exit()\n",
    "    else:\n",
    "        os.makedirs(dir)\n",
    "        \n",
    "def save_obj(saveDir, saveName, obj ):\n",
    "    if not os.path.exists(saveDir):\n",
    "        os.makedirs(saveDir)\n",
    "    with open(saveDir + '/' + saveName + '.pkl', 'wb') as f:\n",
    "        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\n",
    "\n",
    "def load_obj(dir, fileName ):\n",
    "    with open(dir + '/' + fileName + '.pkl', 'rb') as f:\n",
    "        return pickle.load(f)\n",
    "    \n",
    "# compareResultsDuringTraining = True\n",
    "# compareWith = '005'\n",
    "\n",
    "class PlotLosses(keras.callbacks.Callback):\n",
    "    \n",
    "    def on_train_begin(self, logs={}):\n",
    "        # Reshape input vector to fit on graph\n",
    "        def reshapeVector(vec):\n",
    "            l = len(vec)\n",
    "            L = epochs - l\n",
    "            tail = np.ones((L), dtype = int) * vec[-1]\n",
    "            reshVec = np.hstack((vec,tail))\n",
    "            return reshVec\n",
    "        \n",
    "        # Load data to compare with \n",
    "        self.compareData = load_obj('Results/' + compareWith, 'fitHistory')\n",
    "        self.compAcc = reshapeVector(self.compareData['acc'])\n",
    "        self.compValAcc = reshapeVector(self.compareData['val_acc'])\n",
    "        self.compLoss = reshapeVector(self.compareData['loss'])\n",
    "        self.compValLoss = reshapeVector(self.compareData['val_loss'])\n",
    "        \n",
    "        self.i = 0\n",
    "        self.x = []\n",
    "        self.losses = []\n",
    "        self.val_losses = []\n",
    "        self.accuracy = []\n",
    "        self.val_accuracy = []\n",
    "        self.fig = plt.figure()\n",
    "        self.logs = []\n",
    "\n",
    "    def on_epoch_end(self, epoch, logs={}):\n",
    "        \n",
    "        self.logs.append(logs)\n",
    "        self.x.append(self.i)\n",
    "        self.losses.append(logs.get('loss'))\n",
    "        self.val_losses.append(logs.get('val_loss'))\n",
    "        self.accuracy.append(logs.get('acc'))\n",
    "        self.val_accuracy.append(logs.get('val_acc'))\n",
    "        self.i += 1\n",
    "        clear_output(wait=True)\n",
    "    \n",
    "        # Plot Loss\n",
    "        plt.figure(figsize=(8,5))\n",
    "        plt.plot(self.x, self.losses, 'b-', label=\"Train\", linewidth = 2)\n",
    "        plt.plot(self.x, self.val_losses, 'r-', label=\"Validation\", linewidth = 2)\n",
    "        plt.plot(self.x, self.compLoss[:len(self.losses)], 'b--', label=compareWith + \" Training\")\n",
    "        plt.plot(self.x, self.compValLoss[:len(self.losses)], 'r--', label=compareWith + \" Validation\")\n",
    "        plt.xlabel('Epochs')\n",
    "        plt.ylabel('Loss')\n",
    "        plt.legend()\n",
    "        plt.ylim(top=1)\n",
    "        plt.savefig('fitTemp/currentLoss')\n",
    "        plt.show();\n",
    "        \n",
    "        # Plot Accuracy\n",
    "        plt.figure(figsize=(8,5))\n",
    "        plt.plot(self.x, self.accuracy, 'b-', label=\"Train\", linewidth = 2)\n",
    "        plt.plot(self.x, self.val_accuracy, 'r-', label=\"Validation\", linewidth = 2)\n",
    "        plt.plot(self.x, self.compAcc[:len(self.accuracy)], 'b--', label=compareWith + \" Training\")\n",
    "        plt.plot(self.x, self.compValAcc[:len(self.accuracy)], 'r--', label=compareWith + \" Validation\")\n",
    "        plt.xlabel('Epochs')\n",
    "        plt.ylabel('Accuracty')\n",
    "        plt.legend()\n",
    "        plt.ylim(top=1)\n",
    "        plt.savefig('fitTemp/currentAcc')\n",
    "        plt.show();\n",
    "        \n",
    "        with open('fitTemp/logs.txt','w') as file:\n",
    "            file.write(str(logs))\n",
    "            \n",
    "        with open('fitTemp/atEpochNr.txt','w') as file:\n",
    "            file.write(str(epoch))\n",
    "        \n",
    "plot_losses = PlotLosses()\n",
    "\n",
    "def sq2hnit(sq):\n",
    "    col = sq%8\n",
    "    row = (sq - col)//8\n",
    "    return col,row\n",
    "\n",
    "# 0: pawns\n",
    "# 1: kings\n",
    "def vecSt2fullSt(vecSt, nPi, nPa, nWPa):\n",
    "    fullSt = np.zeros((4,8,8), dtype = 'bool')\n",
    "    for i in range(nPi - 2):\n",
    "        sq = vecSt[i]\n",
    "        col,row = sq2hnit(sq)\n",
    "        if i < nWPa:\n",
    "            fullSt[0][row][col] = True\n",
    "        else:\n",
    "            fullSt[1][row][col] = True\n",
    "    col,row = sq2hnit(vecSt[-2])\n",
    "    fullSt[2][row][col] = True\n",
    "    col,row = sq2hnit(vecSt[-1])\n",
    "    fullSt[3][row][col] = True\n",
    "    return fullSt \n",
    "\n",
    "def vecSt2fullSt_8x8x2(vecSt, nPi, nPa, nWPa):\n",
    "    fullSt = np.zeros((8,8,2), dtype = 'int8')\n",
    "    for i in range(nPi - 2):\n",
    "        sq = vecSt[i]\n",
    "        col,row = sq2hnit(sq)\n",
    "        if i < nWPa:\n",
    "            fullSt[row][col][0] = 1\n",
    "        else:\n",
    "            fullSt[row][col][0] = -1\n",
    "    col,row = sq2hnit(vecSt[-2])\n",
    "    fullSt[row][col][1] = 1\n",
    "    col,row = sq2hnit(vecSt[-1])\n",
    "    fullSt[row][col][1] = -1\n",
    "    return fullSt \n",
    "# nPi = 3\n",
    "# nPa = 1\n",
    "# nWPa = 1\n",
    "# vecSt2fullSt(d3[0], nPi, nPa, nWPa)\n",
    "# nPi = 5\n",
    "# nPa = 3\n",
    "# nWPa = 2\n",
    "# vecSt2fullSt(d5[0], nPi, nPa, nWPa)\n",
    "    \n",
    "\n",
    "# count nr of each score instance\n",
    "# wdlCounter placeholders: [-2, -1, 0, 1 ,2]\n",
    "\n",
    "def wdlCountingMachine(ds):\n",
    "    wdlCounter = [0,0,0,0,0]\n",
    "    l = len(ds)\n",
    "    i = 0\n",
    "    intv = l//100\n",
    "    for wdl in ds:\n",
    "        i += 1\n",
    "        if i%intv == 0:\n",
    "            sys.stdout.write(str((i*100)//l) + \" percentage\")\n",
    "            sys.stdout.write('\\r')\n",
    "            sys.stdout.flush()\n",
    "        wdlCounter[wdl[0] + 2] += 1\n",
    "    print(wdlCounter)\n",
    "    return wdlCounter\n",
    "# wdlCountingMachine(d3t)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (4982178, 4, 8, 8)\n",
      "y_train shape: (4982178, 1)\n",
      "X_test shape: (2453910, 4, 8, 8)\n",
      "y_test shape: (2453910, 1)\n",
      "4982178 train samples\n",
      "2453910 test samples\n"
     ]
    }
   ],
   "source": [
    "# load datasets\n",
    "with h5py.File(fileName, 'r') as f:\n",
    "    d = f[dataSetName]\n",
    "    dt = f[dataSetWdlName]\n",
    "    # d5 = f['5PPpKk']\n",
    "    l = len(d)\n",
    "    loadLength = int(l * fractionOfDataToUse)\n",
    "\n",
    "    if convertStates:\n",
    "        X = np.array([vecSt2fullSt(vecSt,nPi, nPa, nWPa) for vecSt in d[:loadLength]])\n",
    "    else:\n",
    "        X = d[:loadLength]\n",
    "\n",
    "    y = dt[:loadLength]\n",
    "\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n",
    "\n",
    "del X\n",
    "del y\n",
    "\n",
    "print('X_train shape:', X_train.shape)\n",
    "print('y_train shape:', y_train.shape)\n",
    "print('X_test shape:', X_test.shape)\n",
    "print('y_test shape:', y_test.shape)\n",
    "print(X_train.shape[0], 'train samples')\n",
    "print(X_test.shape[0], 'test samples')\n",
    "\n",
    "\n",
    "# convert class vectors to binary class matrices\n",
    "y_train = keras.utils.to_categorical(y_train, num_classes)\n",
    "y_test = keras.utils.to_categorical(y_test, num_classes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Create Keras model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_67 (Conv2D)           (None, 8, 7, 7)           136       \n",
      "_________________________________________________________________\n",
      "conv2d_68 (Conv2D)           (None, 7, 6, 32)          928       \n",
      "_________________________________________________________________\n",
      "conv2d_69 (Conv2D)           (None, 6, 5, 64)          8256      \n",
      "_________________________________________________________________\n",
      "conv2d_70 (Conv2D)           (None, 5, 4, 128)         32896     \n",
      "_________________________________________________________________\n",
      "conv2d_71 (Conv2D)           (None, 4, 3, 256)         131328    \n",
      "_________________________________________________________________\n",
      "flatten_14 (Flatten)         (None, 3072)              0         \n",
      "_________________________________________________________________\n",
      "dense_14 (Dense)             (None, 5)                 15365     \n",
      "=================================================================\n",
      "Total params: 188,909\n",
      "Trainable params: 188,909\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "filters = [8,32,64,128,256]\n",
    "filterShape = [2,2,2,2,2]\n",
    "\n",
    "# import keras.backend as K\n",
    "# K.set_floatx('float16')\n",
    "# K.set_epsilon(1e-4) #default is 1e-7\n",
    "# K.set_floatx('float32')\n",
    "# K.set_epsilon(1e-7) #default is 1e-7\n",
    "\n",
    "model = Sequential()\n",
    "filterDivider = 1\n",
    "\n",
    "\n",
    "nnStr = ''\n",
    "for i in range(len(filters)):\n",
    "    s = str(filterShape[i])\n",
    "    filter = str(filters[i])\n",
    "    nnStr += s + 'x' + filter + '-'\n",
    "nnStr = nnStr[:-1]\n",
    "\n",
    "assert (len(filters) == len(filterShape)),\"Error, len(filters) != len(filterShape)\"\n",
    "if useBatchNorm:\n",
    "    for i in range(len(filters)):\n",
    "        if i  == 0:\n",
    "            model.add(Conv2D(filters[i], kernel_size=(filterShape[i], filterShape[i]),\n",
    "                             padding='valid',\n",
    "                             data_format = \"channels_first\",\n",
    "                             use_bias = False,\n",
    "            #                  kernel_initializer = \n",
    "                             input_shape=input_shape))\n",
    "        else:\n",
    "            model.add(Conv2D(filters[i], kernel_size=(filterShape[i], filterShape[i]),\n",
    "                             use_bias = False,\n",
    "                             padding='valid'))\n",
    "        model.add(BatchNormalization())\n",
    "        model.add(Activation(\"relu\"))\n",
    "else:\n",
    "    for i in range(len(filters)):\n",
    "        if i  == 0:\n",
    "            model.add(Conv2D(filters[i], kernel_size=(filterShape[i], filterShape[i]),\n",
    "                             padding='valid',\n",
    "                             activation='relu',\n",
    "                             data_format = \"channels_first\",\n",
    "#                              kernel_initializer = keras.initializers.RandomNormal(mean=0.0, stddev=1.0, seed=None),\n",
    "                             input_shape=input_shape))\n",
    "        else:\n",
    "            model.add(Conv2D(filters[i], kernel_size=(filterShape[i], filterShape[i]),\n",
    "                             padding='valid',\n",
    "#                              kernel_initializer = keras.initializers.RandomNormal(mean=0.0, stddev=1.0, seed=None),\n",
    "                             activation='relu'))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(num_classes, activation='softmax'))\n",
    "if multiGPU: \n",
    "    model = keras.utils.multi_gpu_model(model, gpus=2)\n",
    "model.summary()\n",
    "model.save_weights('tempWeights.hdf5')\n",
    "\n",
    "\n",
    "if optimizer == \"Adadelta\":\n",
    "    model.compile(loss=keras.losses.categorical_crossentropy,\n",
    "                  optimizer=keras.optimizers.Adadelta(),\n",
    "                  metrics=['accuracy'])\n",
    "elif optimizer == 'Adam':\n",
    "    model.compile(loss=keras.losses.categorical_crossentropy,\n",
    "                  optimizer=keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False),\n",
    "                  metrics=['accuracy'])\n",
    "else:\n",
    "    sys.exit(\"Error, invalid optimizer.\")\n",
    "\n",
    "\n",
    "# model.save_weights('tempWeights.hdf5')\n",
    "# model.load_weights('tempWeights.hdf5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Dimension 0 in both shapes must be equal, but are 2 and 16. Shapes are [2,2,7,32] and [16,7,2,2]. for 'Assign_14' (op: 'Assign') with input shapes: [2,2,7,32], [16,7,2,2].",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36m_create_c_op\u001b[0;34m(graph, node_def, inputs, control_inputs)\u001b[0m\n\u001b[1;32m   1575\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1576\u001b[0;31m     \u001b[0mc_op\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mc_api\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_FinishOperation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop_desc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1577\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInvalidArgumentError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mInvalidArgumentError\u001b[0m: Dimension 0 in both shapes must be equal, but are 2 and 16. Shapes are [2,2,7,32] and [16,7,2,2]. for 'Assign_14' (op: 'Assign') with input shapes: [2,2,7,32], [16,7,2,2].",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-60-112dfb6c8536>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mloadWeights\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_weights\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Results/'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mweightsSource\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'/weights.hdf5'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/keras/engine/network.py\u001b[0m in \u001b[0;36mload_weights\u001b[0;34m(self, filepath, by_name, skip_mismatch, reshape)\u001b[0m\n\u001b[1;32m   1159\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1160\u001b[0m                 saving.load_weights_from_hdf5_group(\n\u001b[0;32m-> 1161\u001b[0;31m                     f, self.layers, reshape=reshape)\n\u001b[0m\u001b[1;32m   1162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1163\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_updated_config\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/keras/engine/saving.py\u001b[0m in \u001b[0;36mload_weights_from_hdf5_group\u001b[0;34m(f, layers, reshape)\u001b[0m\n\u001b[1;32m    926\u001b[0m                              ' elements.')\n\u001b[1;32m    927\u001b[0m         \u001b[0mweight_value_tuples\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbolic_weights\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 928\u001b[0;31m     \u001b[0mK\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbatch_set_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mweight_value_tuples\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    929\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    930\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py\u001b[0m in \u001b[0;36mbatch_set_value\u001b[0;34m(tuples)\u001b[0m\n\u001b[1;32m   2433\u001b[0m                 assign_placeholder = tf.placeholder(tf_dtype,\n\u001b[1;32m   2434\u001b[0m                                                     shape=value.shape)\n\u001b[0;32m-> 2435\u001b[0;31m                 \u001b[0massign_op\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massign\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0massign_placeholder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2436\u001b[0m                 \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_assign_placeholder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0massign_placeholder\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2437\u001b[0m                 \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_assign_op\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0massign_op\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/tensorflow/python/ops/variables.py\u001b[0m in \u001b[0;36massign\u001b[0;34m(self, value, use_locking)\u001b[0m\n\u001b[1;32m    643\u001b[0m       \u001b[0mthe\u001b[0m \u001b[0massignment\u001b[0m \u001b[0mhas\u001b[0m \u001b[0mcompleted\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    644\u001b[0m     \"\"\"\n\u001b[0;32m--> 645\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mstate_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massign\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_variable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_locking\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_locking\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    646\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    647\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0massign_add\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdelta\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_locking\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/tensorflow/python/ops/state_ops.py\u001b[0m in \u001b[0;36massign\u001b[0;34m(ref, value, validate_shape, use_locking, name)\u001b[0m\n\u001b[1;32m    214\u001b[0m     return gen_state_ops.assign(\n\u001b[1;32m    215\u001b[0m         \u001b[0mref\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse_locking\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_locking\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m         validate_shape=validate_shape)\n\u001b[0m\u001b[1;32m    217\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mref\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massign\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/tensorflow/python/ops/gen_state_ops.py\u001b[0m in \u001b[0;36massign\u001b[0;34m(ref, value, validate_shape, use_locking, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     _, _, _op = _op_def_lib._apply_op_helper(\n\u001b[1;32m     59\u001b[0m         \u001b[0;34m\"Assign\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mref\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mref\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidate_shape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidate_shape\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 60\u001b[0;31m         use_locking=use_locking, name=name)\n\u001b[0m\u001b[1;32m     61\u001b[0m     \u001b[0m_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_op\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0m_inputs_flat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_op\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\u001b[0m in \u001b[0;36m_apply_op_helper\u001b[0;34m(self, op_type_name, name, **keywords)\u001b[0m\n\u001b[1;32m    785\u001b[0m         op = g.create_op(op_type_name, inputs, output_types, name=scope,\n\u001b[1;32m    786\u001b[0m                          \u001b[0minput_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_types\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattr_protos\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 787\u001b[0;31m                          op_def=op_def)\n\u001b[0m\u001b[1;32m    788\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0moutput_structure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_def\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_stateful\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    789\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py\u001b[0m in \u001b[0;36mnew_func\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    452\u001b[0m                 \u001b[0;34m'in a future version'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mdate\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'after %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    453\u001b[0m                 instructions)\n\u001b[0;32m--> 454\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    455\u001b[0m     return tf_decorator.make_decorator(func, new_func, 'deprecated',\n\u001b[1;32m    456\u001b[0m                                        _add_deprecated_arg_notice_to_docstring(\n",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36mcreate_op\u001b[0;34m(***failed resolving arguments***)\u001b[0m\n\u001b[1;32m   3153\u001b[0m           \u001b[0minput_types\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_types\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3154\u001b[0m           \u001b[0moriginal_op\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_default_original_op\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3155\u001b[0;31m           op_def=op_def)\n\u001b[0m\u001b[1;32m   3156\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_op_helper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompute_device\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompute_device\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3157\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, node_def, g, inputs, output_types, control_inputs, input_types, original_op, op_def)\u001b[0m\n\u001b[1;32m   1729\u001b[0m           op_def, inputs, node_def.attr)\n\u001b[1;32m   1730\u001b[0m       self._c_op = _create_c_op(self._graph, node_def, grouped_inputs,\n\u001b[0;32m-> 1731\u001b[0;31m                                 control_input_ops)\n\u001b[0m\u001b[1;32m   1732\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1733\u001b[0m     \u001b[0;31m# Initialize self._outputs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/envs/endnetGpu/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\u001b[0m in \u001b[0;36m_create_c_op\u001b[0;34m(graph, node_def, inputs, control_inputs)\u001b[0m\n\u001b[1;32m   1577\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInvalidArgumentError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1578\u001b[0m     \u001b[0;31m# Convert to ValueError for backwards compatibility.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1579\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1580\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1581\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mc_op\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Dimension 0 in both shapes must be equal, but are 2 and 16. Shapes are [2,2,7,32] and [16,7,2,2]. for 'Assign_14' (op: 'Assign') with input shapes: [2,2,7,32], [16,7,2,2]."
     ]
    }
   ],
   "source": [
    "if loadWeights:\n",
    "    model.load_weights('Results/' + weightsSource + '/weights.hdf5')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 40/2000\n",
      "4382720/4982178 [=========================>....] - ETA: 4s - loss: 0.0858 - acc: 0.9655"
     ]
    }
   ],
   "source": [
    "fitHistory = model.fit(X_train, y_train,\n",
    "      batch_size=batch_size,\n",
    "          epochs=epochs,\n",
    "          verbose=1,\n",
    "          callbacks=[plot_losses],\n",
    "          validation_data=(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2453910/2453910 [==============================] - 105s 43us/step\n",
      "Test loss: 0.12600663832728656\n",
      "Test accuracy: 0.9507936313885171\n"
     ]
    }
   ],
   "source": [
    "score = model.evaluate(X_test, y_test, verbose=1)\n",
    "print('Test loss:', score[0])\n",
    "print('Test accuracy:', score[1])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Save results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Save dir: Results/012\n",
      "Creating save dir\n",
      "Saving history...\n",
      "Saving weights...\n",
      "Saving figures...\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving summary...\n",
      "All done!\n"
     ]
    }
   ],
   "source": [
    "if saveResults:\n",
    "    #Get next fitID\n",
    "    with open('Results/lastFitId.txt','r') as file:\n",
    "        lastId = file.read()\n",
    "    fitId = str(int(lastId) + 1).zfill(3)\n",
    "    fitId = fitId\n",
    "    with open('Results/lastFitId.txt','w') as file:\n",
    "        file.write(fitId)\n",
    "\n",
    "    # Generate save dir\n",
    "    saveDir = 'Results/' + str(fitId)\n",
    "    print('Save dir: ' + saveDir)\n",
    "    print(\"Creating save dir\")\n",
    "    if os.path.exists(saveDir):\n",
    "        print(\"Save dir already exists, aborting!!!\")\n",
    "        sys.exit(\"Save dir already exists, aborting!!!\")\n",
    "\n",
    "    # Save info directories\n",
    "    ep = len(model.history.history['acc'])\n",
    "    if loadWeights:\n",
    "        initWeightsId = weightsSource\n",
    "    else:\n",
    "        initWeightsId = 'RND'\n",
    "    createDir(saveDir + '/_' +  '1.numberOfPieces-------' + str(nPi)) \n",
    "    createDir(saveDir + '/_' +  '2.neuralNetStructure---' + str(nnStr) )\n",
    "    createDir(saveDir + '/_' +  '3.loadedWeightsFrom----' +  str(initWeightsId) )\n",
    "    createDir(saveDir + '/_' +  '4.epochs---------------' +  str(ep) + '_of_' + str(epochs) )\n",
    "    createDir(saveDir + '/_' +  '5.batchSize------------' +  str(batch_size) )\n",
    "    createDir(saveDir + '/_' +  '6.optimizer------------' +  str(optimizer) )\n",
    "    createDir(saveDir + '/_' +  '7.finalAccuracy--------' +  str(round(score[1],3)))\n",
    "\n",
    "    #save history\n",
    "    print(\"Saving history...\")\n",
    "    hist = model.history.history\n",
    "    saveName = 'fitHistory'\n",
    "    save_obj(saveDir, saveName, hist)\n",
    "\n",
    "    #save weights\n",
    "    print(\"Saving weights...\")\n",
    "    model.save_weights(saveDir + '/' + 'weights.hdf5')\n",
    "\n",
    "    #save figures\n",
    "    print(\"Saving figures...\")\n",
    "    acc = hist['acc']\n",
    "    loss = hist['loss']\n",
    "    val_acc = hist['val_acc']\n",
    "    val_loss = hist['val_loss']\n",
    "    x = [i for i in range(len(acc))]\n",
    "\n",
    "    plt.plot(x,loss, label = \"Loss\")\n",
    "    plt.plot(x,val_loss, label = \"Validation Loss\")\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    plt.savefig(saveDir + '/loss')\n",
    "    plt.show()\n",
    "\n",
    "    plt.plot(x,acc, label = \"Accuracy\")\n",
    "    plt.plot(x,val_acc, label = \"Validation Acc\")\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Accuracy')\n",
    "    plt.legend()\n",
    "    plt.savefig(saveDir + '/acc')\n",
    "    plt.show()\n",
    "\n",
    "    #save summary\n",
    "    print(\"Saving summary...\")\n",
    "    from contextlib import redirect_stdout\n",
    "\n",
    "    with open(saveDir + '/modelsummary.txt', 'w') as f:\n",
    "        with redirect_stdout(f):\n",
    "            model.summary()\n",
    "    print(\"All done!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Compare results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9566852087507278\n",
      "0.9565226292517178\n"
     ]
    }
   ],
   "source": [
    "y1 = load_obj('Results/005','fitHistory')\n",
    "y2 = load_obj('Results/012','fitHistory')\n",
    "metric = 'acc'\n",
    "acc2 = y2[metric]\n",
    "acc1 = y1[metric]\n",
    "l = min(len(acc1), len(acc2))\n",
    "acc1 = acc1[:l]\n",
    "acc2 = acc2[:l]\n",
    "\n",
    "x = [i for i in range(l)]\n",
    "\n",
    "plt.plot(x,acc1, label = \"float32\")\n",
    "plt.plot(x,acc2, label = \"float16\")\n",
    "plt.xlabel('epochs')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend()\n",
    "plt.savefig('mynd')\n",
    "plt.show()\n",
    "\n",
    "print(acc1[l-1])\n",
    "print(acc2[l-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# take sample from 5, and gen wdls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sys.exit()\n",
    "import h5py\n",
    "# f.close()\n",
    "fs.close()\n",
    "fd.close()\n",
    "# ft.close()\n",
    "fs = h5py.File('AllStates_intVec.hdf5', 'r')\n",
    "# fd = h5py.File('5PPpKk.hdf5', 'w')\n",
    "fd = h5py.File('5PPpKk.hdf5', 'a')\n",
    "\n",
    "# fs.copy('5PPpKk', fd['/'])\n",
    "fdn = list(fd)\n",
    "print(fdn)\n",
    "\n",
    "x = fd[fdn[0]]\n",
    "\n",
    "    \n",
    "\n",
    "lFull = len(x)\n",
    "print(lFull)\n",
    "lPart = 500000\n",
    "# lPart = lFull//1000\n",
    "# print(lPart)\n",
    "# fd.create_dataset('5PPpKk_random500k', shape=(500000,5))\n",
    "dd = fd['5PPpKk_random500k']\n",
    "\n",
    "# import sys\n",
    "# sys.exit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sys.exit()\n",
    "from random import randint\n",
    "for i in range(500):\n",
    "    r = randint(0,lFull - 1000)\n",
    "    xPart = x[r:r+1000]\n",
    "    dd[i*1000:i*1000+1000] = xPart \n",
    "    \n",
    "# f = h5py.File('5PPpKk_TlTest.hdf5', 'a')\n",
    "# fn = list(f)\n",
    "# fn\n",
    "# f.create_dataset('5PPpKk_0.01')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### copy dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sys.exit()\n",
    "fd.close()\n",
    "with h5py.File('5PPpKk.hdf5', 'a') as fs:\n",
    "    fsn = list(fs)\n",
    "    print(fsn)\n",
    "    ds = fs[fsn[1]]\n",
    "    \n",
    "    with h5py.File('5PPpKk_random500k.hdf5', 'w') as fd:\n",
    "        fs.copy(fsn[1], fd['/'])\n",
    "        fdn = list(fd)\n",
    "        print(fdn)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:endnetGpu]",
   "language": "python",
   "name": "conda-env-endnetGpu-py"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
