{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot General/Specific results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%run -i 'arena.py'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib\n",
    "\n",
    "def plotData(file, saveDir, style, label, color, fullRuns, linewidth, ax):\n",
    "    x = [i for i in range(9)]\n",
    "    if fullRuns:\n",
    "        data = load_obj(saveDir, file)\n",
    "        data = convertFullToMeanError(data)\n",
    "        accuracy = data[:,0]\n",
    "        error = data[:,1]\n",
    "        ax.errorbar(x[:len(data)], accuracy, error, fmt='none', capsize = 4, color = color)\n",
    "        ax.plot(x[:len(data)], accuracy, style, label = label, color = color, linewidth = linewidth)\n",
    "    else:    \n",
    "        data  = load_obj(saveDir,file)\n",
    "        ax.plot(x[:len(data)],data, style, label = label, color = color, linewidth = linewidth)\n",
    "\n",
    "def plotIt(stuffToPlot):\n",
    "    ######### plot results\n",
    "    for file, saveDir, style, label, color, fullRuns in stuffToPlot:\n",
    "        plotData(file, saveDir, style, label, color, fullRuns, linewidth, ax)\n",
    "        \n",
    "    ######## setup\n",
    "    yl = ax.get_ylim()\n",
    "    if ymin != None:\n",
    "        yl = (ymin,yl[1])\n",
    "    if ymax != None:\n",
    "        yl = (yl[0],ymax)\n",
    "    ax.set_ylim(yl[0], yl[1])\n",
    "    ax.set_xlabel(\"Number of transferred layers\")\n",
    "    ax.set_ylabel(\"Test Accuracy\")\n",
    "    ax.legend()\n",
    "    plt.minorticks_on()\n",
    "    ax.grid(b=True, which='major', color='0.5', linestyle='-')\n",
    "    ax.grid(b=True, which='minor', color='0.9', linestyle='-')\n",
    "\n",
    "    # set fontsize\n",
    "    matplotlib.rc('font', size=fontSize)\n",
    "    matplotlib.rc('axes', titlesize=fontSize)\n",
    "    \n",
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "############################### parameters\n",
    "saveDir = 'bengioResults'\n",
    "\n",
    "######## Misc parm\n",
    "xSize = 12\n",
    "ySize = 12\n",
    "fontSize = 20\n",
    "linewidth = 1\n",
    "\n",
    "######### colors\n",
    "### blue red colors\n",
    "c3n4p      = '#ff9999'\n",
    "c3n4       = '#ff0000'\n",
    "c4n4p      = '#9999ff'\n",
    "c4n4       = '#0000ff'\n",
    "\n",
    "c3n4pref   = '#ff9999'\n",
    "c3n4ref    = '#ff0000'\n",
    "c4n4pref   = '#9999ff'\n",
    "c4n4ref    = '#0000ff'\n",
    "\n",
    "c4scrConv  = '#ff00ff'\n",
    "c4_10Epoch = '#00ffff'\n",
    "\n",
    "### bnw colors\n",
    "# c3n4p = '#000000'\n",
    "# c3n4 = '#555555'\n",
    "# c4n4p = '#000000'\n",
    "# c4n4 = '#555555'\n",
    "# c3n4pref = '#000000'\n",
    "# c3n4ref = '#555555'\n",
    "# c4n4pref = '#000000'\n",
    "# c4n4ref = '#555555'\n",
    "\n",
    "### new colors\n",
    "# c3n4p = '#ff0000'\n",
    "# c3n4 = '#00ff00'\n",
    "# c4n4p = '#0000ff'\n",
    "# c4n4 = '#00ffff'\n",
    "# c3n4pref = '#ff5555'\n",
    "# c3n4ref = '#55ff55'\n",
    "# c4n4pref = '#5555ff'\n",
    "# c4n4ref = '#55ffff'\n",
    "\n",
    "########### scale\n",
    "ymin = 0.6 \n",
    "ymax = 1.0\n",
    "\n",
    "######### limits\n",
    "#outdated from tensorboard logs\n",
    "acc4scrConvValue = 0.9782\n",
    "acc4_10EpochValue = 0.96542\n",
    "\n",
    "######### Prepare plot\n",
    "\n",
    "fig = plt.figure(figsize=(xSize,ySize))\n",
    "ax = fig.add_subplot(111)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Run arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "######### Plot plots using plot function plot\n",
    "run001 = [\n",
    "               #3n4+\n",
    "               ['3n4+-10runAverage', 'bengioResults/1.savedResults/001', '-', '3n4+ 001', c3n4p, False],\n",
    "               #3n4\n",
    "               ['3n4-10runAverage',  'bengioResults/1.savedResults/001', '-', '3n4 001',  c3n4,  False],\n",
    "               #4n4+\n",
    "               ['4n4+-10runAverage', 'bengioResults/1.savedResults/001', '-', '4n4+ 001', c4n4p, False],\n",
    "               #4n4\n",
    "               ['4n4-10runAverage' , 'bengioResults/1.savedResults/001', '-', '4n4 001',  c4n4,  False]\n",
    "                ]\n",
    "\n",
    "\n",
    "run002 = [\n",
    "               #3n4+\n",
    "#                ['3n4+', 'bengioResults/1.savedResults/002', '-.', '3n4+ 002', c3n4p, True]\n",
    "               #3n4\n",
    "#                ['3n4',  'bengioResults/1.savedResults/002', '-.', '3n4 002',  c3n4,  False]\n",
    "               #4n4+\n",
    "#                ['4n4+allRuns', 'bengioResults/1.savedResults/002', '-.', '4n4+ 002', c4n4p, True]\n",
    "               #4n4\n",
    "               ['4n4allRuns' , 'bengioResults/1.savedResults/002', '-.', '4n4 002',  c4n4,  True]\n",
    "              ]\n",
    "\n",
    "run003 = [\n",
    "               #3n4+\n",
    "               ['3n4+', 'bengioResults/1.savedResults/003', '--', '3n4+ 003', c3n4p, False],\n",
    "               #3n4\n",
    "               ['3n4',  'bengioResults/1.savedResults/003', '--', '3n4 003',  c3n4,  False],\n",
    "               #4n4+\n",
    "               ['4n4+', 'bengioResults/1.savedResults/003', '--', '4n4+ 003', c4n4p, False],\n",
    "               #4n4\n",
    "               ['4n4' , 'bengioResults/1.savedResults/003', '--', '4n4 003',  c4n4,  False]\n",
    "              ]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Draw Plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ruined\n",
    "# plotIt(run001)\n",
    "# ruined\n",
    "# plotIt(run002)\n",
    "# one run average for comp with 001 and 002\n",
    "plotIt(run003)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7feb3360d630>]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# %matplotlib notebook\n",
    "# %matplotlib ipympl\n",
    "%matplotlib inline\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.style.use('classic')\n",
    "\n",
    "f, ax = plt.subplots()\n",
    "x = [i/100 for i in range(0,1000)]\n",
    "y = [math.sin(x) for x in x]\n",
    "ax.plot(x,y)\n",
    "\n",
    "# f.show()\n",
    "\n",
    "# f, ax = plt.subplots()\n",
    "# ax.plot(x, y)\n",
    "# # ax.set_title('Simple plot')\n",
    "# # plt.title(\"asdfasdf\")\n",
    "# plt.gca().set_title(\"fkdsl\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f732f4935f8>]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot([1, 2, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXwAAAD8CAYAAAB0IB+mAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvOIA7rQAADU9JREFUeJzt3GGI5Hd9x/H3xztTaYym9FaQu9Ok9NJ42ELSJU0Raoq2XPLg7oFF7iBYJXhgGylVhBRLlPjIhloQrtWTilXQGH0gC57cA40ExAu3ITV4FyLb03oXhawxzZOgMe23D2bSna53mX92Z3cv+32/4GD+//ntzJcfe++dndmZVBWSpO3vFVs9gCRpcxh8SWrC4EtSEwZfkpow+JLUhMGXpCamBj/JZ5M8meT7l7g+ST6ZZCnJo0lunP2YkqT1GvII/3PAgRe5/lZg3/jfUeBf1j+WJGnWpga/qh4Efv4iSw4Bn6+RU8DVSV4/qwElSbOxcwa3sRs4P3F8YXzup6sXJjnK6LcArrzyyj+8/vrrZ3D3ktTHww8//LOqmlvL184i+INV1XHgOMD8/HwtLi5u5t1L0stekv9c69fO4q90ngD2ThzvGZ+TJF1GZhH8BeBd47/WuRl4pqp+7ekcSdLWmvqUTpIvAbcAu5JcAD4CvBKgqj4FnABuA5aAZ4H3bNSwkqS1mxr8qjoy5foC/npmE0mSNoTvtJWkJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJamJQcFPciDJ40mWktx1kevfkOSBJI8keTTJbbMfVZK0HlODn2QHcAy4FdgPHEmyf9Wyvwfur6obgMPAP896UEnS+gx5hH8TsFRV56rqOeA+4NCqNQW8Znz5tcBPZjeiJGkWhgR/N3B+4vjC+NykjwK3J7kAnADef7EbSnI0yWKSxeXl5TWMK0laq1m9aHsE+FxV7QFuA76Q5Nduu6qOV9V8Vc3Pzc3N6K4lSUMMCf4TwN6J4z3jc5PuAO4HqKrvAq8Cds1iQEnSbAwJ/mlgX5Jrk1zB6EXZhVVrfgy8DSDJmxgF3+dsJOkyMjX4VfU8cCdwEniM0V/jnElyT5KD42UfBN6b5HvAl4B3V1Vt1NCSpJdu55BFVXWC0Yuxk+funrh8FnjLbEeTJM2S77SVpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDUxKPhJDiR5PMlSkrsuseadSc4mOZPki7MdU5K0XjunLUiyAzgG/BlwATidZKGqzk6s2Qf8HfCWqno6yes2amBJ0toMeYR/E7BUVeeq6jngPuDQqjXvBY5V1dMAVfXkbMeUJK3XkODvBs5PHF8Yn5t0HXBdku8kOZXkwMVuKMnRJItJFpeXl9c2sSRpTWb1ou1OYB9wC3AE+EySq1cvqqrjVTVfVfNzc3MzumtJ0hBDgv8EsHfieM/43KQLwEJV/aqqfgj8gNEPAEnSZWJI8E8D+5Jcm+QK4DCwsGrN1xg9uifJLkZP8Zyb4ZySpHWaGvyqeh64EzgJPAbcX1VnktyT5OB42UngqSRngQeAD1XVUxs1tCTppUtVbckdz8/P1+Li4pbctyS9XCV5uKrm1/K1vtNWkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgYFP8mBJI8nWUpy14use0eSSjI/uxElSbMwNfhJdgDHgFuB/cCRJPsvsu4q4G+Ah2Y9pCRp/YY8wr8JWKqqc1X1HHAfcOgi6z4GfBz4xQznkyTNyJDg7wbOTxxfGJ/7P0luBPZW1ddf7IaSHE2ymGRxeXn5JQ8rSVq7db9om+QVwCeAD05bW1XHq2q+qubn5ubWe9eSpJdgSPCfAPZOHO8Zn3vBVcCbgW8n+RFwM7DgC7eSdHkZEvzTwL4k1ya5AjgMLLxwZVU9U1W7quqaqroGOAUcrKrFDZlYkrQmU4NfVc8DdwIngceA+6vqTJJ7khzc6AElSbOxc8iiqjoBnFh17u5LrL1l/WNJkmbNd9pKUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpoYFPwkB5I8nmQpyV0Xuf4DSc4meTTJN5O8cfajSpLWY2rwk+wAjgG3AvuBI0n2r1r2CDBfVX8AfBX4h1kPKklanyGP8G8ClqrqXFU9B9wHHJpcUFUPVNWz48NTwJ7ZjilJWq8hwd8NnJ84vjA+dyl3AN+42BVJjiZZTLK4vLw8fEpJ0rrN9EXbJLcD88C9F7u+qo5X1XxVzc/Nzc3yriVJU+wcsOYJYO/E8Z7xuf8nyduBDwNvrapfzmY8SdKsDHmEfxrYl+TaJFcAh4GFyQVJbgA+DRysqidnP6Ykab2mBr+qngfuBE4CjwH3V9WZJPckOThedi/wauArSf49ycIlbk6StEWGPKVDVZ0ATqw6d/fE5bfPeC5J0oz5TltJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaMPiS1ITBl6QmDL4kNWHwJakJgy9JTRh8SWrC4EtSEwZfkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJasLgS1ITBl+SmjD4ktSEwZekJgy+JDVh8CWpCYMvSU0YfElqwuBLUhMGX5KaGBT8JAeSPJ5kKcldF7n+N5J8eXz9Q0mumfWgkqT1mRr8JDuAY8CtwH7gSJL9q5bdATxdVb8L/BPw8VkPKklanyGP8G8ClqrqXFU9B9wHHFq15hDwb+PLXwXeliSzG1OStF47B6zZDZyfOL4A/NGl1lTV80meAX4b+NnkoiRHgaPjw18m+f5aht6GdrFqrxpzL1a4FyvcixW/t9YvHBL8mamq48BxgCSLVTW/mfd/uXIvVrgXK9yLFe7FiiSLa/3aIU/pPAHsnTjeMz530TVJdgKvBZ5a61CSpNkbEvzTwL4k1ya5AjgMLKxaswD85fjyXwDfqqqa3ZiSpPWa+pTO+Dn5O4GTwA7gs1V1Jsk9wGJVLQD/CnwhyRLwc0Y/FKY5vo65txv3YoV7scK9WOFerFjzXsQH4pLUg++0laQmDL4kNbHhwfdjGVYM2IsPJDmb5NEk30zyxq2YczNM24uJde9IUkm27Z/kDdmLJO8cf2+cSfLFzZ5xswz4P/KGJA8keWT8/+S2rZhzoyX5bJInL/VepYx8crxPjya5cdANV9WG/WP0Iu9/AL8DXAF8D9i/as1fAZ8aXz4MfHkjZ9qqfwP34k+B3xxffl/nvRivuwp4EDgFzG/13Fv4fbEPeAT4rfHx67Z67i3ci+PA+8aX9wM/2uq5N2gv/gS4Efj+Ja6/DfgGEOBm4KEht7vRj/D9WIYVU/eiqh6oqmfHh6cYvedhOxryfQHwMUafy/SLzRxukw3Zi/cCx6rqaYCqenKTZ9wsQ/aigNeML78W+MkmzrdpqupBRn/xeCmHgM/XyCng6iSvn3a7Gx38i30sw+5Lramq54EXPpZhuxmyF5PuYPQTfDuauhfjX1H3VtXXN3OwLTDk++I64Lok30lyKsmBTZtucw3Zi48Ctye5AJwA3r85o112XmpPgE3+aAUNk+R2YB5461bPshWSvAL4BPDuLR7lcrGT0dM6tzD6re/BJL9fVf+1pVNtjSPA56rqH5P8MaP3/7y5qv5nqwd7OdjoR/h+LMOKIXtBkrcDHwYOVtUvN2m2zTZtL64C3gx8O8mPGD1HubBNX7gd8n1xAVioql9V1Q+BHzD6AbDdDNmLO4D7Aarqu8CrGH2wWjeDerLaRgffj2VYMXUvktwAfJpR7Lfr87QwZS+q6pmq2lVV11TVNYxezzhYVWv+0KjL2JD/I19j9OieJLsYPcVzbjOH3CRD9uLHwNsAkryJUfCXN3XKy8MC8K7xX+vcDDxTVT+d9kUb+pRObdzHMrzsDNyLe4FXA18Zv27946o6uGVDb5CBe9HCwL04Cfx5krPAfwMfqqpt91vwwL34IPCZJH/L6AXcd2/HB4hJvsToh/yu8esVHwFeCVBVn2L0+sVtwBLwLPCeQbe7DfdKknQRvtNWkpow+JLUhMGXpCYMviQ1YfAlqQmDL0lNGHxJauJ/Acz2XLpusNoKAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "x = fig.axes[0].y\n",
    "# for i in x:print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Calc confidence intervals\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "### MOVED TO ARENA.PY\n",
    "def calcStats(measurements):\n",
    "    μ = np.mean(measurements)\n",
    "    σ = np.std(measurements, ddof=1)\n",
    "    max = np.max(measurements)*100\n",
    "    min = np.min(measurements)*100\n",
    "    print('max-min', max-min)\n",
    "    print('σ',σ*100)\n",
    "    n = len(measurements)\n",
    "    ste = σ/np.sqrt(n-1)\n",
    "    error = 1.96 * ste\n",
    "    print('error',error*100)\n",
    "    print()\n",
    "    return [μ, error] \n",
    "    \n",
    "def convertFullToMeanError(allResults):\n",
    "    return np.array([calcStats(m) for m in allResults])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot tensorboard in Matplotlib example code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from tensorflow.python.summary.event_accumulator import EventAccumulator\n",
    "\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def plot_tensorflow_log(path):\n",
    "\n",
    "    # Loading too much data is slow...\n",
    "    tf_size_guidance = {\n",
    "        'compressedHistograms': 10,\n",
    "        'images': 0,\n",
    "        'scalars': 100,\n",
    "        'histograms': 1\n",
    "    }\n",
    "\n",
    "    event_acc = EventAccumulator(path, tf_size_guidance)\n",
    "    event_acc.Reload()\n",
    "\n",
    "    # Show all tags in the log file\n",
    "    #print(event_acc.Tags())\n",
    "\n",
    "    training_accuracies =   event_acc.Scalars('training-accuracy')\n",
    "    validation_accuracies = event_acc.Scalars('validation_accuracy')\n",
    "\n",
    "    steps = 10\n",
    "    x = np.arange(steps)\n",
    "    y = np.zeros([steps, 2])\n",
    "\n",
    "    for i in xrange(steps):\n",
    "        y[i, 0] = training_accuracies[i][2] # value\n",
    "        y[i, 1] = validation_accuracies[i][2]\n",
    "\n",
    "    plt.plot(x, y[:,0], label='training accuracy')\n",
    "    plt.plot(x, y[:,1], label='validation accuracy')\n",
    "\n",
    "    plt.xlabel(\"Steps\")\n",
    "    plt.ylabel(\"Accuracy\")\n",
    "    plt.title(\"Training Progress\")\n",
    "    plt.legend(loc='upper right', frameon=True)\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    log_file = \"./logs/events.out.tfevents.1456909092.DTA16004\"\n",
    "    plot_tensorflow_log(log_file)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
